user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 650; # Consider lowering if not needed for SignalR long polling specifically
    keepalive_requests 10000;
    client_max_body_size 10m;

    # Optimize for long-lived connections (like SignalR)
    proxy_buffering off;
    proxy_read_timeout 6h; # 6 hours might be excessive, adjust as needed
    proxy_connect_timeout 90s;
    proxy_send_timeout 6h; # 6 hours might be excessive, adjust as needed

    # Map directive for WebSocket upgrades (needed before server blocks)
    map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }

    # --- Server Block for HTTP (Port 80) ---
    # This block catches all HTTP traffic and redirects it to HTTPS
    server {
        # Listen on port 80 for any IP address. 'default_server' makes this the default for port 80.
        listen 80 default_server;
        listen [::]:80 default_server; # Also listen on IPv6 if applicable

        # Use '_' to match any hostname not matched by other server blocks
        server_name _;

        # Redirect all HTTP requests to their HTTPS equivalent using the host requested by the client.
        # $host contains the domain name from the Host header.
        # $request_uri contains the path and query string.
        return 301 https://$host$request_uri;
    }

    # --- Server Block for HTTPS (Port 443) ---
    # This block handles all HTTPS traffic as the default server.
    server {
        # Listen on port 443 for SSL connections. 'default_server' makes it the default for port 443.
        # Added 'http2' for better performance if supported by clients.
        listen 443 ssl http2 default_server;
        listen [::]:443 ssl http2 default_server; # Also listen on IPv6 if applicable

        # Use '_' to match any hostname not matched by other specific HTTPS server blocks.
        server_name _;

        # !!! IMPORTANT SSL CERTIFICATE CONFIGURATION !!!
        # You MUST provide SSL certificate files here.
        # Since 'server_name _' is used, Nginx will use these certificates for *any* hostname
        # requested over HTTPS that doesn't match another specific server block.
        # This WILL CAUSE BROWSER WARNINGS unless the requested hostname matches the
        # Common Name (CN) or a Subject Alternative Name (SAN) in THIS certificate.
        # --> Replace these paths with the actual certificate and key for your PRIMARY domain.
        ssl_certificate /etc/nginx/ssl/cloudflare-origin.56cards.com.pem;
        ssl_certificate_key /etc/nginx/ssl/privkey.pem;

        # SSL settings (keep or adjust as needed)
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers on;
        ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH"; # Consider updating cipher suite based on current best practices
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        # Add HSTS header for security (optional but recommended)
        # add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        # SignalR specific configuration for /Cards56Hub endpoint
        location /Cards56Hub {
            proxy_pass http://web:80/Cards56Hub; # Assuming 'web' is your backend service name/address
            proxy_http_version 1.1;

            # Required for WebSocket support
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;

            # Standard proxy headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Settings for long-running connections (can inherit from http block or be set here)
            proxy_read_timeout 6h;
            proxy_send_timeout 6h;
            proxy_buffering off;

            # Prevent timeouts for SignalR long polling (redundant if set globally)
            # proxy_connect_timeout 90s;
            proxy_cache off; # Important for dynamic content like SignalR
        }

        # Location for all other requests (e.g., static files, other API endpoints)
        location / {
            proxy_pass http://web:80/; # Assuming 'web' is your backend service name/address
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            # Consider adding proxy_buffering off; here too if needed
        }
    }
}